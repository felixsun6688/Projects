
@{
    ViewBag.Title = "Users - User";
}

@model AorangiPeak.Web.Areas.APManage.Models.UserViewModel

<div class="row">
    <div class="col-lg-12">
        <ul class="breadcrumb">
            <li>User<span class="divider"></span></li>
            <li>Users</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="widget">
            <div class="widget-body">
                <div class="clearfix">
                    <div class="btn-group">
                        <button class="btn btn-success" data-toggle="modal" data-target="#newUserModal">
                            Add New
                            <i style="margin-left:6px" class="glyphicon glyphicon-plus
"></i>
                        </button>
                    </div>
                </div><!--clearfix-->

                <div class="space15"></div>

                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr role="row">
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 252px;">User Name</th>
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 170px;">Email</th>
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 377px;">Role</th>
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 170px;">Status</th>
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 240px;">Last Login Time</th>
                            <th role="columnheader" rowspan="1" colspan="1" style="width: 150px;">Option</th>
                        </tr>
                    </thead>

                    <tbody>
                        @for (int i = 0; i < Model.Users.Count(); i++)
                        {
                            <tr class="odd" id="@Model.Users[i].Id">
                                <td><a href="javascript:void()" onclick="updateUser('@Model.Users[i].Id')" data-toggle="modal" data-target="#updateUserModal">@Model.Users[i].Username</a></td>
                                <td>@Model.Users[i].Email</td>
                                <td>@Model.Users[i].Rolename</td>
                                <td>@Model.Users[i].Status</td>
                                <td>@Model.Users[i].Createtime</td>
                                <td>
                                    <a href="javascript:void()">Inactive</a> |
                                    <a href="javascript:void()" onclick="deleteUser('@Model.Users[i].Id')">Delete</a>
                                </td>
                            </tr>
                            
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!--<div class="row">
    <div class="span6"></div>
    <div class="span6">
        <div class="dataTables_paginate paging_bootstrap pagination">
            <ul>
                <li class="prev disabled">
                    <a href="#" class="btn btn-default">← Prev</a>
                </li>
                <li class="active">
                    <a href="#" class="btn btn-default disabled">1</a>
                </li>
                <li>
                    <a href="#" class="btn btn-default">2</a>
                </li>
                <li>
                    <a href="#" class="btn btn-default">3</a>
                </li>
                <li class="next">
                    <a href="#" class="btn btn-default">Next → </a>
                </li>
            </ul>
        </div>
    </div>
</div>-->


<div class="modal fade" id="newUserModal" tabindex="-1" role="dialog"
     aria-labelledby="newUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    New User
                </h4>
            </div>
            @using (Html.BeginForm("Add", "User", FormMethod.Post, new { @class = "add_form", id = "newuser_form" }))
            {
                <div class="modal-body">

                    <div class="form-item">
                        @Html.TextBoxFor(model => model.NewUserDto.Email, new { @Class = "form-control", placeholder = "Email Address", autofocus = "autofocus" })
                    </div>

                    <div class="form-item">
                        @Html.TextBoxFor(model => model.NewUserDto.Username, new { @Class = "form-control", placeholder = "User Name" })
                    </div>

                    <div class="form-item">
                        @Html.PasswordFor(model => model.NewUserDto.Userpwd, new { @Class = "form-control", placeholder = "Password" })
                    </div>

                    <div class="form-item">
                        @Html.PasswordFor(model => model.NewUserDto.Confirmpwd, new { @Class = "form-control", placeholder = "Confirm Password" })
                    </div>

                    <div class="form-group">
                        @Html.DropDownListFor(model => model.NewUserDto.Roleid, Model.RoleList as SelectList, new { @Class = "form-control" })
                    </div>

                    <div class="form-group" style="color:red">
                        @Html.ValidationSummary()
                    </div>
                    <div id="message"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" style="width:80px" class="btn btn-default" data-dismiss="modal">
                        Cancel
                    </button>
                    <input type="submit" class="btn btn-success" style="width:80px" value="Add" id="submit">
                </div>
            }
        </div><!-- /.modal-content -->

    </div><!-- /.modal -->
</div>

<div class="modal fade" id="updateUserModal" tabindex="-1" role="dialog"
     aria-labelledby="updateUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    Update User
                </h4>
            </div>
            @using (Html.BeginForm("Update", "User", FormMethod.Post, new { @class = "add_form", id = "updateuser_form" }))
            {
                <div class="modal-body">

                    <div class="form-item">
                        @Html.TextBoxFor(model => model.CurrentUserDto.Email, new { @Class = "form-control", placeholder = "Email Address", autofocus = "autofocus" })
                        @Html.HiddenFor(model=>model.CurrentUserDto.Id)
                        @Html.HiddenFor(model => model.CurrentUserDto.Createtime)
                    </div>

                    <div class="form-item">
                        @Html.TextBoxFor(model => model.CurrentUserDto.Username, new { @Class = "form-control", placeholder = "User Name", @readonly= "readonly" })
                    </div>

                    <div class="form-item">
                        @Html.PasswordFor(model => model.CurrentUserDto.Userpwd, new { @Class = "form-control", placeholder = "Password" })
                    </div>

                    <div class="form-item">
                        @Html.PasswordFor(model => model.CurrentUserDto.Confirmpwd, new { @Class = "form-control", placeholder = "Confirm Password" })
                    </div>

                    <div class="form-group">
                        @Html.DropDownListFor(model => model.CurrentUserDto.Roleid, Model.RoleList as SelectList, new { @Class = "form-control" })
                    </div>

                    <div class="form-group" style="color:red">
                        @Html.ValidationSummary()
                    </div>
                    <div id="message"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" style="width:80px" class="btn btn-default" data-dismiss="modal">
                        Cancel
                    </button>
                    <input type="submit" class="btn btn-success" style="width:80px" value="Save" id="submit">
                </div>
            }
        </div><!-- /.modal-content -->

    </div><!-- /.modal -->
</div>


<script>

    function deleteUser(uid)
    {
        var status = confirm("Are you sure to delete the current user?");
        if (!status) return false;

        $.ajax({
            url: '/User/Delete',
            cache: false,
            timeout: 3600,
            async: false,
            type: "Get",
            data: "uid=" + uid,
            dataType: "json",
            success: function (result) {
                if (result == "True") {
                    $('#' + uid).hide('slow');
                }
                else {
                    alert('Delete Failed!');
                }

            }
        });
    }

    function updateUser(uid)
    {
        $.ajax({
            url: '/User/Update',
            cache: false,
            timeout: 3600,
            async: false,
            type: "Get",
            data: "uid=" + uid,
            dataType:"json",
            success: function (result) {
                $("#CurrentUserDto_Email").val(result.Email);
                $("#CurrentUserDto_Username").val(result.Username);
                $("#CurrentUserDto_Roleid").val(result.Roleid);
                $("#CurrentUserDto_Id").val(result.Id);
                $("#CurrentUserDto_Createtime").val(result.Createtime);
            }
        });
    }

    jQuery.validator.addMethod("checkUserExist", function (value, element) {
        return checkUserExist(value);
    }, "User name has existed.");

    jQuery.validator.addMethod("letterNumberAndUnderscore", function (value, element) {
        return this.optional(element) || /^[\u0391-\uFFE5\w]+$/.test(value);
    }, "User name can contain only letters, numbers, or the underscore character.");

    $(document).ready(function () {
        $("#newuser_form").validate({
            rules: {
                'NewUserDto.Email': { required: true, email: true },
                'NewUserDto.Username': {
                    required: true,
                    checkUserExist: true,
                    letterNumberAndUnderscore: true,
                    rangelength: [6, 20]
                },
                'NewUserDto.Userpwd': { required: true, minlength: 6 },
                'NewUserDto.Confirmpwd': { required: true, equalTo: "#NewUserDto_Userpwd" }
            }
        });

        $("#updateuser_form").validate({
            rules: {
                'CurrentUserDto.Email': { required: true, email: true },
                'CurrentUserDto.Userpwd': { required: true, minlength: 6 },
                'CurrentUserDto.Confirmpwd': { required: true, equalTo: "#CurrentUserDto_Userpwd" }
            }
        });

        $(document).ready(function () {
            $('#user_header').addClass("active");
            $('#user').removeClass("collapse").addClass("collapsed");
            $('#users').addClass("active");
        });

    });

    function checkUserExist(argument) {
        var username = jQuery.trim(argument);
        var user_is_exist = true;

        $.ajax({
            url: '/User/Exist',
            cache: false,
            timeout: 3600,
            async: false,
            type: "Get",
            data: "u=" + username,
            success: function (result) {
                if (result == "True") {
                    user_is_exist = true;
                }
                else {
                    user_is_exist = false;
                }
            }
        });

        return !user_is_exist;
    }

</script>